---
import type { InferGetStaticPropsType } from "astro"
import { getCollection } from "astro:content"
import { Image } from "astro:assets"
import Layout from "$layout/base-layout.astro"
import { AUTHOR_NAME } from "$constants/global"
import { Article, MarkdownToc, Alert } from "$components"

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog", ({ data }) => {
    return import.meta.env.PROD ? !data.isDraft : true
  })
  const pages = blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry: entry },
  }))

  return pages
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>

// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props
const { Content, remarkPluginFrontmatter: frontmatter, headings } = await entry.render()
const { title, description, image, topics, publishedOn, lastUpdatedOn, isDraft } = entry.data
const tags = topics.map((topic) => topic.slug)
---

<Layout {title} {description} imageSrc={image?.src} class="typescale-content">
  <Fragment slot="seo">
    <meta property="og:type" content="article" />
    <meta property="og:article:author" content={AUTHOR_NAME} />
    {tags.map((tag) => <meta property="og:article:tag" content={tag} />)}
    <meta property="og:article:published_time" content={publishedOn.toISOString()} />
    <meta property="og:article:modified_time" content={lastUpdatedOn.toISOString()} />
  </Fragment>
  <div class="container">
    <main>
      {isDraft ? <Alert level="warning">This blog is currently in draft</Alert> : null}
      <h1>{title}</h1>
      {frontmatter["minutesRead"] ? <p>{frontmatter["minutesRead"]}</p> : null}
      <p>{description}</p>
      {entry.data.image ? <Image src={entry.data.image} alt="" /> : null}
      <Article>
        <Content />
      </Article>
    </main>
    {
      isDraft ? (
        <nav>
          <MarkdownToc {headings} />
        </nav>
      ) : null
    }
  </div>
</Layout>
